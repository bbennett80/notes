boardd/tests/test_boardd_api.py:66:    # print('Old API, elapsed time: {} secs'.format(elapsed_old))
boardd/tests/test_boardd_api.py:72:    # print('New API, elapsed time: {} secs'.format(elapsed_new))
boardd/tests/boardd_old.py:216:    #  print("R: {0} {1}".format(hex(m[0]), str(m[2]).encode("hex")))
boardd/tests/boardd_old.py:229:      #  print("S: {0} {1}".format(hex(m[0]), str(m[2]).encode("hex")))

camerad/cameras/camera_qcom.cc:37:    LOG(util::string_format("%s: %d", log_msg, err).c_str());

car/toyota/carcontroller.py:96:    #print("steer {0} {1} {2} {3}".format(apply_steer, min_lim, max_lim, CS.steer_torque_motor)

common/util.h:45:std::string string_format(const std::string& format, Args... args) {
common/params.cc:118:    throw std::runtime_error(util::string_format("Failed to ensure params path, errno=%d", errno));

debug/internal/power_monitor.py:59:    print("  {:.2f} Seconds     {} samples".format((stop_time-start_time).total_seconds(), voltage_average[1]))
debug/get_fingerprint.py:30:  print("number of messages {0}:".format(len(msgs)))
debug/get_fingerprint.py:31:  print("fingerprint {0}".format(fingerprint))
debug/dump.py:57:          print("logMonotime = {}".format(evt.logMonoTime))
debug/dump.py:63:              print("{} = {}".format(".".join(value), item))
debug/cpu_usage_stat.py:69:    matched = any([l for l in p.cmdline() if any([pn for pn in monitored_proc_names if re.match(r'.*{}.*'.format(pn), l, re.M | re.I)])])
debug/cpu_usage_stat.py:113:        msg = 'avg: {1:.2%}, min: {2:.2%}, max: {3:.2%} {0}'.format(os.path.basename(k), stat['avg']['total'], stat['min']['total'], stat['max']['total'])
debug/cpu_usage_stat.py:116:            msg += '\n {}: {}'.format(stat_type, [name + ':' + str(round(stat[stat_type][name]*100, 2)) for name in cpu_time_names])
debug/cpu_usage_stat.py:121:      print('avg sum: {0:.2%} over {1} samples {2} seconds\n'.format(

hardware/tici/power_monitor.py:52:    print("  {:.2f} Seconds     {} samples".format(stop_time - start_time, voltage_average[1]))
hardware/eon/hardware.h:41:    std::string cmd = util::string_format("setprop persist.neos.ssh %d", enabled ? 1 : 0);

locationd/test/ubloxd.py:78:      d = '"{}"s'.format(''.join('\\x{:02X}'.format(b) for b in s))
locationd/test/ublox.py:325:  def format(self, msg):
locationd/test/ublox.py:558:      return msg_types[type].format(self)
locationd/test/ublox.py:567:      return msg_types[type].format(self)
locationd/locationd.cc:471:        std::string lastGPSPosJSON = util::string_format(

loggerd/tests/test_uploader.py:58:    keys = [f"{self.seg_format.format(i)}/qlog.bz2" for i in seg1]
loggerd/tests/test_uploader.py:59:    keys += [f"{self.seg_format2.format(i)}/qlog.bz2" for i in seg2]
loggerd/tests/test_uploader.py:61:      keys += [f"{self.seg_format.format(i)}/{f}" for f in ['rlog.bz2', 'fcamera.hevc', 'dcamera.hevc']]
loggerd/tests/test_uploader.py:63:      keys += [f"{self.seg_format2.format(i)}/{f}" for f in ['rlog.bz2', 'fcamera.hevc', 'dcamera.hevc']]
loggerd/tests/test_uploader.py:64:    keys += [f"{self.seg_format.format(i)}/bootlog.bz2" for i in seg1]
loggerd/tests/test_uploader.py:65:    keys += [f"{self.seg_format2.format(i)}/bootlog.bz2" for i in seg2]
loggerd/tests/test_uploader.py:105:      self.seg_dir = self.seg_format.format(i)
loggerd/tests/test_uploader.py:109:      self.seg_dir = self.seg_format2.format(i)
loggerd/tests/loggerd_tests_common.py:92:    self.seg_dir = self.seg_format.format(self.seg_num)
loggerd/tests/test_deleter.py:52:    self.seg_dir = self.seg_format.format(self.seg_num)
loggerd/raw_logger.cc:66:  vid_path = util::string_format("%s/%s.mkv", path, filename);
loggerd/raw_logger.cc:69:  lock_path = util::string_format("%s/%s.lock", path, filename);

manager/manager.py:41:    default_params.append(("LastUpdateTime", datetime.datetime.utcnow().isoformat().encode('utf8')))

modeld/visiontest.py:65:      raise ValueError("Bad model name: {}".format(model))
swaglog.py:86:    msg = self.format(record).rstrip('\n')
swaglog.py:87:    # print("SEND".format(repr(msg)))

test/test_updated.py:166:    last_update_time = datetime.datetime.fromisoformat(t)
test/update_ci_routes.py:28:    f"https://{_DATA_ACCOUNT_CI}.blob.core.windows.net/{'openpilotci'}/{destpath}?{DEST_KEY}",


### f-sting reformat complete ###

test/update_ci_routes.py:28:    f"https://{_DATA_ACCOUNT_CI}.blob.core.windows.net/{'openpilotci'}/{destpath}?{DEST_KEY}",

test/update_ci_routes.py:49:      "https://{}.blob.core.windows.net/{}/{}?{}".format(source_account, source_bucket, key_prefix, source_key),
test/update_ci_routes.py:49:      f"https://{source_account}.blob.core.windows.net/{source_bucket}/{key_prefix}?{source_key}",

test/update_ci_routes.py:50:      "https://{}.blob.core.windows.net/{}/{}?{}".format(_DATA_ACCOUNT_CI, "openpilotci", dongle_id, DEST_KEY),
test/update_ci_routes.py:50:      f"https://{_DATA_ACCOUNT_CI}.blob.core.windows.net/{'openpilotci'}/{dongle_id}?{DEST_KEY}",

test/test_fingerprints.py:81:      print("Those two fingerprints are inconsistent {0} {1}".format(car_names[idx1], car_names[idx2]))
test/test_fingerprints.py:81:      print(f"Those two fingerprints are inconsistent {car_names[idx1]} {car_names[idx1]})

test/test_fingerprints.py:88:print("Found {0} individual fingerprints".format(len(fingerprints_flat)))
test/test_fingerprints.py:88:print(f"Found {len(fingerprints_flat)} individual fingerprints")
